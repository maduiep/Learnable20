{"version":3,"sources":["components/Navbar.jsx","components/Form.jsx","App.js","serviceWorker.js","index.js"],"names":["Navbar","className","Form","props","React","useState","question","setQuestion","options","setOptions","onSubmit","evt","preventDefault","whenSubmitted","type","placeholder","value","onChange","console","log","target","map","e","idx","key","arr","onClick","App","page","setPage","randOpt","setRandomOption","limit","length","Math","floor","random","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.e839d91a.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Navbar() {\r\n  return (\r\n    <header className=\"p-5 text-center\">\r\n      <div className=\"container mx-auto m-4\">\r\n        <h1 className=\"text-6xl font-bold\">Easy Decision Maker</h1>\r\n        <p className=\"text-2xl\">\r\n          When the decision is too hard or too simple use the Easy Decision\r\n          Maker\r\n        </p>\r\n      </div>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Navbar;\r\n","import React from \"react\";\r\n\r\nexport function Form(props) {\r\n  const [state, setState] = React.useState(0);\r\n  const [question, setQuestion] = React.useState(\"\");\r\n  const [options, setOptions] = React.useState([\"\", \"\", \"\"]);\r\n  const [placeholder, setPlaceholder] = React.useState([\"\"]);\r\n\r\n  const handleSubmit = (evt) => {\r\n    evt.preventDefault();\r\n    props.whenSubmitted(question, options);\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit} className=\"max-w-lg mx-auto\">\r\n      <label className=\"text-4xl\"> Question </label>\r\n      {/* you'll need to store the input in state */}\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Q: Enter your question here\"\r\n        className=\"border border-gray-200 py-5 px-5 w-full mt-4 text-2xl rounded-md\"\r\n        value={question}\r\n        onChange={(evt) => {\r\n          console.log(\"typing\", evt.target.value);\r\n          setQuestion(evt.target.value);\r\n        }}\r\n      />\r\n      <div className=\"flex flex-col\">\r\n        <label className=\"text-4xl\"> Options </label>\r\n        {options.map((e, idx) => (\r\n          <input\r\n            key={idx}\r\n            value={e}\r\n            className=\"border border-gray-200 py-5 px-5 w-full mb-4 mt-4 rounded-md\"\r\n            type=\"text\"\r\n            onChange={(evt) => {\r\n              const arr = [...options];\r\n              arr[idx] = evt.target.value;\r\n              setOptions(arr);\r\n            }}\r\n          />\r\n        ))}\r\n        <div className=\"flex justify-between\">\r\n          <button\r\n            type=\"button\"\r\n            className=\"px-6 py-4 self-start border rounded-lg text-gray-800\"\r\n            onClick={() => setOptions([...options, \"\"])}\r\n          >\r\n            + Add Options\r\n          </button>\r\n\r\n          <button className=\"px-6 py-4 self-start bg-blue-500 rounded-lg text-white\">\r\n            Submit\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default Form;\r\n","import React from \"react\";\r\n\r\n// importing components\r\nimport Navbar from \"./components/Navbar\";\r\n\r\n//importing custom styles\r\nimport \"./styles/app.css\";\r\nimport Form from \"./components/Form\";\r\n\r\nconst randomNumber = (limit) => Math.floor(Math.random() * limit);\r\n\r\nfunction App() {\r\n  const [page, setPage] = React.useState(0);\r\n  const [question, setQuestion] = React.useState(\"\");\r\n  const [options, setOptions] = React.useState([]);\r\n  const [randOpt, setRandomOption] = React.useState(null);\r\n\r\n  return (\r\n    <div>\r\n      <Navbar />\r\n      {page === 0 && (\r\n        <Form\r\n          whenSubmitted={(question, options) => {\r\n            setPage(1);\r\n            setQuestion(question);\r\n            setOptions(options);\r\n            setRandomOption(randomNumber(options.length));\r\n            console.log(\"Data arrived\", question, options);\r\n          }}\r\n        />\r\n      )}\r\n      {page === 1 && (\r\n        <span className=\"text-center\">\r\n          <div className=\"text-3xl\">{question}</div>\r\n          {options.map((e, idx) => (\r\n            <li key={idx} className={idx === randOpt ? \"text-red-500\" : \"\"}>\r\n              {idx + 1}. {e}\r\n            </li>\r\n          ))}\r\n          <button\r\n            className=\"text-center https://docs.github.com/en/github/working-with-github-pages/configuring-a-publishing-source-for-your-github-pages-site\"\r\n            type=\"text\"\r\n            onClick={() => {\r\n              setPage(0);\r\n            }}\r\n          >\r\n            Ask Another Random Qeustion\r\n          </button>\r\n        </span>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}